<template>
    <div v-if="changes.length" class="changes-container">
       <div v-for="change in changes" :key="change.attribute">
           <!--changes all camel case and underscored values to UI friendly titles-->
           <span class="changes-title">{{change.attribute.replaceAll('_', ' ').replaceAll(/([A-Z])/g, ' $1').trim()}}</span>: {{change.original}} to {{change.new}}
        </div>
    </div>
</template>
<script>

export default {
    data(){
        return {
            changes : [],
            originalVillaState: JSON.parse(JSON.stringify(this.$store.getters['villaEditModule/villa'])),
            reactiveVillaState: this.$store.getters['villaEditModule/villa'],
            exceptionsForVilla: ['check_in_days_allowed', 'check_out_days_allowed']
        }
    },
    created(){
    this.$store.subscribeAction({
        after: (action, state) => {
            //loops through the comparisons for the objects
            this.compareForChanges(this.originalVillaState, this.reactiveVillaState, this.exceptionsForVilla);
            this.exceptObjAttrToConatStr(this.originalVillaState, state.villaEditModule.villa, this.exceptionsForVilla);
        }
    })
    },
    methods: {
        compareForChanges(staticObject, dynamicObject, exceptions){
            for(const attribute in dynamicObject){
                //exceptions
                var runComparison = true;
                if(exceptions && exceptions.includes(attribute)){
                    runComparison = false;
                };
                //comparison
                if(dynamicObject[attribute] != staticObject[attribute] && runComparison){
                   if(typeof(staticObject[attribute]) == 'object'){
                       //recursively iterate through object
                       this.compareForChanges(staticObject[attribute], dynamicObject[attribute]);
                   } else {
                       //add to changes list
                       this.changes.unshift({attribute: attribute, new: dynamicObject[attribute], original: staticObject[attribute]});
                   }
                } else {
                    //remove from changes array if value has changed back to original value
                    this.changes.forEach(function(change, index, object){
                        if(change.attribute == attribute){
                            object.splice(index, 1);
                        }
                    })
                }
            }
            this.cleanUpChangeLog();
        },
        cleanUpChangeLog(){
            //get rid of old changed values in new array
            var loggedAttributes = [];
            this.changes.forEach(function(change, index, object){
                if(loggedAttributes.includes(change.attribute)){
                    object.splice(index, 1);
                } else {
                    loggedAttributes.push(change.attribute);
                }
            });
        },
        exceptObjAttrToConatStr(staticObject, dynamicObject, exceptions){
            //comparison loop
            var scopeThis = this;
            exceptions.forEach(function(exception){
                if(staticObject[exception] != dynamicObject[exception]){
                    var hasChanged = false;
                    var oldValToString = '';
                    var newValToString = '';

                    if(staticObject[exception] != null){
                        staticObject[exception].forEach(function(exceptionItem, index){
                            //concatenate  for future changelog
                            oldValToString += exceptionItem + ', ';
                            //compare
                            if( dynamicObject[exception] == null || exceptionItem != dynamicObject[exception][index]){
                                hasChanged = true;
                            }
                        });
                    }
                    
                    if(dynamicObject[exception] != null){
                    dynamicObject[exception].forEach(function(exceptionItem, index){
                        //concatenate for future changelog
                        newValToString += exceptionItem + ', ';
                        //compare
                        if( staticObject[exception] == null || exceptionItem != staticObject[exception][index]){
                            hasChanged = true;
                        }
                    })
                }
                }
                if(hasChanged){
                    //get the last comma of of each
                        oldValToString = oldValToString.substring(0, oldValToString.length-2);
                        newValToString = newValToString.substring(0, newValToString.length-2);
                        scopeThis.changes.push({attribute: exception, new: newValToString, original: oldValToString});
                }
            })

        }
    }

}
</script>
<style scoped>
.changes-container{
    background-color: white;
    border: 1px solid #000;
    border-radius: 5px;
    padding: 10px;
    font-size: 10px;
    margin-bottom: 15px;
}
.changes-title{
    text-transform: capitalize;
    font-weight: 900;
}
</style>
